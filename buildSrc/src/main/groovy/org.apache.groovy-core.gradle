/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

import org.apache.groovy.gradle.SharedConfiguration
import org.apache.groovy.gradle.DgmConverter

if (project == rootProject) {
    project.extensions.create(SharedConfiguration, 'sharedConfiguration', SharedConfiguration, project.objects, project.providers)
}

pluginManager.apply('org.apache.groovy-library')

def dgmConverter = tasks.register("dgmConverter", DgmConverter) {
    classpath.from files(compileJava, configurations.compileClasspath)
    sources.from('src/main').include('**/*GroovyMethods.java')
}

jar {
    from dgmConverter
}

// Gradle classloading magic with Groovy will only work if it finds a *jar*
// on classpath. This "bootstrap jar" contains the minimal compiler, without .groovy compiled files

tasks.register("bootstrapJar", Jar) {
    from compileJava
    from dgmConverter

    destinationDirectory = layout.buildDirectory.dir("bootstrap")
    archiveClassifier = 'bootstrap'
}

