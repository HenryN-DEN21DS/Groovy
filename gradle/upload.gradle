/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

boolean isUsingBintray = rootProject.hasProperty('bintrayUser') && rootProject.bintrayUser &&
        rootProject.hasProperty('bintrayPassword') && rootProject.bintrayPassword

if (isUsingBintray) {
    logger.lifecycle 'Deployment environment set to Bintray'
}

def removeJarjaredDependencies = { p ->
    p.dependencies.removeAll(p.dependencies.findAll {
        it.groupId == 'org.codehaus.groovy' ||
                (['asm', 'asm-util', 'asm-analysis', 'asm-tree', 'asm-commons', 'antlr', 'commons-cli', 'openbeans'].contains(it.artifactId))
    })
}

allprojects {
    apply plugin: 'maven'
    apply from: "${rootProject.projectDir}/gradle/pomconfigurer.gradle"
    install.dependsOn checkCompatibility
}

apply from: 'gradle/backports.gradle'

ext.basename = { String s -> s.take(s.lastIndexOf('.')) }
ext.deriveFile = { File archive, String suffix -> new File(archive.parent, basename(archive.name) + "-${suffix}.jar") }

allprojects {
    ext.signWithClassifier = { String c, File f ->
        signing.sign(c, f)
        project.artifacts.add('archives', new File(f.parent, f.name + '.asc')) {
            classifier = c
            type = 'jar.asc'
        }
    }

    ext.signArchiveTask = { archiveTask ->
        signing.sign(archiveTask.classifier, archiveTask.archivePath)
        project.artifacts.add('archives', new File(archiveTask.destinationDir, archiveTask.archiveName + '.asc')) {
            classifier = archiveTask.classifier
            type = archiveTask.extension + '.asc'
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                pom pomConfigureClosure
                if (shouldSign) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }
            }
        }
    }

    install {
        repositories {
            mavenInstaller {
                pom pomConfigureClosure
                if (shouldSign) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }
            }
        }
    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
        archives groovydocJar
    }

    [uploadArchives, install]*.with {
        // dependency on jarAllAll should in theory be replaced with jar, jarWithIndy but
        // in practice, it is faster
        dependsOn([jarAllAll, sourceJar, javadocJar, groovydocJar])
        doFirst {
            if (rootProject.useIndy()) {
                new GradleException('You cannot use uploadArchives or install task with the flag [indy] turned'
                        +' on because the build handles indy artifacts by itself in that case.')
            }
            def indyJar = rootProject.ext.deriveFile(jar.archivePath, 'indy')
            if (indyJar.exists()) {
                project.artifacts.add('archives', indyJar)
            }
            def grooidJar = rootProject.ext.deriveFile(jar.archivePath, 'grooid')
            if (grooidJar.exists()) {
                project.artifacts.add('archives', grooidJar)
            }
        }
    }

    install {
        doFirst {
            if (shouldSign) {
                signArchiveTask(jar)
                signArchiveTask(sourceJar)
                signArchiveTask(javadocJar)
                signArchiveTask(groovydocJar)
                def indyJar = rootProject.ext.deriveFile(jar.archivePath, 'indy')
                if (indyJar.exists()) {
                    signWithClassifier('indy', indyJar)
                }
                def grooidJar = rootProject.ext.deriveFile(jar.archivePath, 'grooid')
                if (grooidJar.exists()) {
                    signWithClassifier('grooid', grooidJar)
                }
            }
        }
    }
}

// the root project generates an alternate 'groovy-all' artifact
[uploadArchives, install]*.with {
    dependsOn([sourceAllJar, javadocAllJar, groovydocAllJar, distBin])
    doFirst {
        project.artifacts.add('archives', jarAll) {
            name = 'groovy-all'
        }
        project.artifacts.add('archives', sourceAllJar) {
            name = 'groovy-all'
        }
        project.artifacts.add('archives', javadocAllJar) {
            name = 'groovy-all'
        }
        project.artifacts.add('archives', groovydocAllJar) {
            name = 'groovy-all'
        }
        project.artifacts.add('archives', distBin) {
            name = 'groovy-binary'
        }
        tasks.withType(Jar).matching { it.name.startsWith('backport') }.each { t ->
            project.artifacts.add('archives', t.archivePath) {
                name = t.baseName
                type = 'jar'
                classifier = t.classifier
            }
        }

        def indyJar = deriveFile(jarAll.archivePath, 'indy')
        if (indyJar.exists()) {
            project.artifacts.add('archives', indyJar)
        }
        def grooidJar = deriveFile(jarAll.archivePath, 'grooid')
        if (grooidJar.exists()) {
            project.artifacts.add('archives', grooidJar)
        }
    }
}

install {
    doFirst {
        if (shouldSign) {
            signArchiveTask(jarAll)
            signArchiveTask(sourceAllJar)
            signArchiveTask(javadocAllJar)
            signArchiveTask(groovydocAllJar)
            signArchiveTask(distBin)

            // next three are done as a side effect since it was the easiest approach
            signing.sign(distSrc.archivePath)
            signing.sign(distDoc.archivePath)
            signing.sign(dist.archivePath)

            tasks.withType(Jar).matching { it.name.startsWith('backport') }.each { t ->
                signing.sign(t.classifier, t.archivePath)
                project.artifacts.add('archives', new File(t.destinationDir, t.archiveName + '.asc')) {
                    name = t.baseName
                    classifier = t.classifier
                    type = t.extension + '.asc'
                }
            }

            def indyJar = deriveFile(jarAll.archivePath, 'indy')
            if (indyJar.exists()) {
                signWithClassifier('indy', indyJar)
            }
            def grooidJar = deriveFile(jarAll.archivePath, 'grooid')
            if (grooidJar.exists()) {
                signWithClassifier('grooid', grooidJar)
            }
        }
    }
}

ext.pomAll = {
    addFilter('groovy') { artifact, file ->
        !(artifact.name.contains('groovy-all')) &&
                !(artifact.name.contains('groovy-binary')) &&
                !(artifact.name.contains('backport'))
    }
    addFilter('all') { artifact, file ->
        artifact.name.contains('groovy-all')
    }
    addFilter('binary') { artifact, file ->
        artifact.name.contains('groovy-binary')
    }
    project.backports.each { pkg, classes ->
        addFilter("backports-$pkg") { artifact, file ->
            artifact.name == "groovy-backports-$pkg"
        }
    }

    // regular pom
    def groovypom = pom('groovy', pomConfigureClosure)

    // pom for 'all'
    def allpom = pom('all', pomConfigureClosure)
    allpom.artifactId = 'groovy-all'

    // pom for binary zip
    def binarypom = pom('binary', pomConfigureClosureWithoutTweaks)
    binarypom.artifactId = 'groovy-binary'

    // poms for backports
    project.backports.each { pkg, classes ->
        String id = "backports-$pkg"
        def backportPom = pom(id, pomConfigureClosureWithoutTweaks)
        backportPom.artifactId = "groovy-$id"
        backportPom.whenConfigured { p ->
            p.dependencies.clear()
        }
    }

    modules().each { sp ->
        sp.install.repositories.mavenInstaller.pom.whenConfigured { subpom ->
            // add dependencies of other modules
            allpom.dependencies.addAll(subpom.dependencies)
        }
        sp.uploadArchives.repositories.mavenDeployer.pom.whenConfigured { subpom ->
            // add dependencies of other modules
            allpom.dependencies.addAll(subpom.dependencies)
        }
    }


    groovypom.whenConfigured(removeJarjaredDependencies)
    allpom.whenConfigured(removeJarjaredDependencies)

    binarypom.whenConfigured { p ->
        p.dependencies.clear()
    }

    if (shouldSign) {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
    }
}

install {
    // make sure dependencies poms are built *before* the all pom
    dependsOn(modules()*.install)
    repositories {
        mavenInstaller pomAll
    }
}

uploadArchives {
    // make sure dependencies poms are built *before* the all pom
    dependsOn(modules()*.uploadArchives)
    repositories {
        mavenDeployer pomAll
    }
}
